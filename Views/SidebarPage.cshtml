<!-- View (simplified) -->
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<ContentModels.SidebarPage>
@inject ISiteService _ISiteService;
@{
    Layout = "Main";

    // Cache root node lookup
    var childNodes = _ISiteService.GetSideBarChildNodes();

}

<main class="container flex flex-col lg:flex-row gap-5 mx-auto px-4 md:px-6 lg:px-8 py-12">
    <!-- Desktop Sidebar -->
    <div class="w-[30%] h-full hidden lg:flex flex-col gap-5">
        <div class="container bg-[#F7F7F7] py-12 rounded-[8px]">
            <nav>
                <ul class="about-us-nav main-nav">
                    @if (childNodes?.Any() == true)
                    {
                        foreach (var node in childNodes)
                        {
                            <li>
                                <a href="#"
                                   class="text-aeblack-900 no-underline active"
                                   onclick="loadContent(@node.Id,@node.IsNewPage, @node.ReturnURL, event)">
                                    <h5 class="text-[20px]">@node.Name</h5>
                                </a>
                            </li>
                        }
                    }
                    else
                    {
                        <li>No pages found</li>
                    }
                </ul>
            </nav>+
        </div>

        <div class="container py-12">
            @await Html.GetBlockGridHtmlAsync(Model, "mainContent")
        </div>
    </div>

    <!-- Content Area -->
    <div class="w-full lg:w-[70%] h-full" id="sidebar-content">
        @await Html.GetBlockGridHtmlAsync(Model?.Children?.FirstOrDefault()!, "mainContent")
    </div>
</main>

<script>
       async function loadContent(nodeId, isNewPage, returnUrl, event) {
        event.preventDefault();

        if (isNewPage) {
            window.location.href = returnUrl;
            return;
        }

        try {
            const response = await fetch(`/api/sidebar/content/${nodeId}`);

            if (response.ok) {
                const result = await response.json();

                // Handle redirect if needed (though your check above should prevent this)
                if (result.redirectUrl) {
                    window.location.href = result.redirectUrl;
                    return;
                }

                // Handle HTML content
                document.getElementById("sidebar-content").innerHTML = result;
            } else {
                console.error("Failed to load content");
            }
        } catch (error) {
            console.error("Error loading content:", error);
        }
    }
</script>